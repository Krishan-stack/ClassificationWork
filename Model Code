{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMNgUD4c1f32QfZpq45ovdS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Krishan-stack/ClassificationWork/blob/main/Model%20Code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tXHLoFtor5A6",
        "outputId": "5c39e075-8592-4fe2-96fd-df2bd955c4e4"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import csv\n",
        "\n",
        "#cleaning stopwords list creation\n",
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "\n",
        "#embeddings creation \n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras import regularizers\n"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B7XhIk2LhHY1"
      },
      "source": [
        "This section uploads the different types of patents to file from github"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "id": "pSJqrTIfwPGL",
        "outputId": "8b6bd20f-91ce-46c4-f0fe-595d47035408"
      },
      "source": [
        "url1 = 'https://raw.githubusercontent.com/Krishan-stack/ClassifcationWork/main/classificationdata.csv?token=AMLLGCKTKPVA5F3YGRWRIRC7YX7ZA'\n",
        "\n",
        "dataset1 = pd.read_csv(url1)\n",
        "print(len(dataset1['patent_number']))\n",
        "dataset1.head()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3689\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cpc_group_id</th>\n",
              "      <th>cpc_subgroup_id</th>\n",
              "      <th>patent_abstract</th>\n",
              "      <th>patent_number</th>\n",
              "      <th>patent_title</th>\n",
              "      <th>patent_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D10/14</td>\n",
              "      <td>An embodiment is a memory card including a rec...</td>\n",
              "      <td>10007306</td>\n",
              "      <td>276-pin buffered memory card with enhanced mem...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D10/14</td>\n",
              "      <td>To detect an abnormality in an interrupt contr...</td>\n",
              "      <td>10042791</td>\n",
              "      <td>Abnormal interrupt request processing</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D70/00</td>\n",
              "      <td>A system and method for managing power in a su...</td>\n",
              "      <td>10080195</td>\n",
              "      <td>Access and power management for centralized ne...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D10/13</td>\n",
              "      <td>A first threshold number of cache lines may be...</td>\n",
              "      <td>9965391</td>\n",
              "      <td>Access cache line from lower level cache</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D70/00</td>\n",
              "      <td>Concepts and technologies described herein rel...</td>\n",
              "      <td>10091721</td>\n",
              "      <td>Access network discovery and selection functio...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  cpc_group_id  ... patent_year\n",
              "0         Y02D  ...        2018\n",
              "1         Y02D  ...        2018\n",
              "2         Y02D  ...        2018\n",
              "3         Y02D  ...        2018\n",
              "4         Y02D  ...        2018\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "id": "3DHur9qU5Ttc",
        "outputId": "370a263e-41d9-433c-eca3-7e5a5e08db48"
      },
      "source": [
        "url2 ='https://raw.githubusercontent.com/Krishan-stack/ClassifcationWork/main/G16Hdata.csv?token=AMLLGCMIK52UNWIGYX4ATHS7YX7ZG'\n",
        "dataset2 = pd.read_csv(url2)\n",
        "print(len(dataset2['patent_number']))\n",
        "dataset2.head()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2839\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cpc_group_id</th>\n",
              "      <th>cpc_subgroup_id</th>\n",
              "      <th>patent_abstract</th>\n",
              "      <th>patent_number</th>\n",
              "      <th>patent_title</th>\n",
              "      <th>patent_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>G16H</td>\n",
              "      <td>G16H50/20</td>\n",
              "      <td>A method for reconstructing 3-D vessel geometr...</td>\n",
              "      <td>9934566</td>\n",
              "      <td>3-D vessel tree surface reconstruction method</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>G16H</td>\n",
              "      <td>G16H30/40</td>\n",
              "      <td>A system and method for corrected imaging incl...</td>\n",
              "      <td>10089737</td>\n",
              "      <td>3D corrected imaging</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>G16H</td>\n",
              "      <td>G16H50/20</td>\n",
              "      <td>A method and apparatus are used to compare an ...</td>\n",
              "      <td>10105554</td>\n",
              "      <td>3D tracking of an HDR source using a flat pane...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>G16H</td>\n",
              "      <td>G16H30/20</td>\n",
              "      <td>A medical image data processing method for det...</td>\n",
              "      <td>9870446</td>\n",
              "      <td>3D-volume viewing by controlling sight depth</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>G16H</td>\n",
              "      <td>G16H10/65</td>\n",
              "      <td>Disclosed are various embodiments for providin...</td>\n",
              "      <td>10157339</td>\n",
              "      <td>Access control for encrypted data in machine-r...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  cpc_group_id  ... patent_year\n",
              "0         G16H  ...        2018\n",
              "1         G16H  ...        2018\n",
              "2         G16H  ...        2018\n",
              "3         G16H  ...        2018\n",
              "4         G16H  ...        2018\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "id": "h_FfU_Lk7EBD",
        "outputId": "a4c5f16e-b081-4c41-8db5-af847178ee99"
      },
      "source": [
        "url3 = 'https://raw.githubusercontent.com/Krishan-stack/ClassifcationWork/main/G16Bdata.csv?token=AMLLGCJZ6EKDHFS64KDMOCC7YX7ZM'\n",
        "dataset3 = pd.read_csv(url3)\n",
        "print(len(dataset3['patent_number']))\n",
        "dataset3.head()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "429\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cpc_group_id</th>\n",
              "      <th>cpc_subgroup_id</th>\n",
              "      <th>patent_abstract</th>\n",
              "      <th>patent_number</th>\n",
              "      <th>patent_title</th>\n",
              "      <th>patent_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>G16B</td>\n",
              "      <td>G16B25/00</td>\n",
              "      <td>A novel electronic system provides fast three-...</td>\n",
              "      <td>10116913</td>\n",
              "      <td>3D virtual reality model sharing and monetizat...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>G16B</td>\n",
              "      <td>G16B40/00</td>\n",
              "      <td>Various embodiments for methods and systems th...</td>\n",
              "      <td>9903830</td>\n",
              "      <td>Accurate analyte measurements for electrochemi...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>G16B</td>\n",
              "      <td>G16B40/00</td>\n",
              "      <td>Various embodiments for a method that allow fo...</td>\n",
              "      <td>9903831</td>\n",
              "      <td>Accurate analyte measurements for electrochemi...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>G16B</td>\n",
              "      <td>G16B30/00</td>\n",
              "      <td>Accurate and fast mapping of sequencing reads ...</td>\n",
              "      <td>10127351</td>\n",
              "      <td>Accurate and fast mapping of reads to genome</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>G16B</td>\n",
              "      <td>G16B99/00</td>\n",
              "      <td>A method of measuring and calculating (prefera...</td>\n",
              "      <td>9869684</td>\n",
              "      <td>Accurate measurement of glutathione for diseas...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  cpc_group_id  ... patent_year\n",
              "0         G16B  ...        2018\n",
              "1         G16B  ...        2018\n",
              "2         G16B  ...        2018\n",
              "3         G16B  ...        2018\n",
              "4         G16B  ...        2018\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "id": "-sqHX7KOYWdK",
        "outputId": "0b4e6f7e-f019-4860-8ce5-4ea69da1a5be"
      },
      "source": [
        "url4 ='https://raw.githubusercontent.com/Krishan-stack/ClassifcationWork/main/G16B(2019).csv?token=AMLLGCO7GO5ZMORA6AN2MBS7YYAEO' \n",
        "dataset4 = pd.read_csv(url4)\n",
        "print(len(dataset4['patent_number']))\n",
        "dataset4.head()"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "638\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cpc_group_id</th>\n",
              "      <th>cpc_subgroup_id</th>\n",
              "      <th>patent_abstract</th>\n",
              "      <th>patent_number</th>\n",
              "      <th>patent_title</th>\n",
              "      <th>patent_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>G16B</td>\n",
              "      <td>G16B20/00</td>\n",
              "      <td>Methods and systems for accelerated input data...</td>\n",
              "      <td>10522241</td>\n",
              "      <td>Accelerating genomic data parsing on field pro...</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>G16B</td>\n",
              "      <td>G16B20/00</td>\n",
              "      <td>Embodiments of the present invention provide m...</td>\n",
              "      <td>10457990</td>\n",
              "      <td>Accurate deduction of fetal DNA fraction with ...</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>G16B</td>\n",
              "      <td>G16B20/00</td>\n",
              "      <td>Embodiments of the present disclosure present ...</td>\n",
              "      <td>10176294</td>\n",
              "      <td>Accurate typing of HLA through exome sequencing</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>G16B</td>\n",
              "      <td>G16B30/00</td>\n",
              "      <td>Embodiments of the present invention include m...</td>\n",
              "      <td>10169531</td>\n",
              "      <td>Algebraic phasing of polyploids</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>G16B</td>\n",
              "      <td>G16B30/00</td>\n",
              "      <td>Embodiments of the present invention include m...</td>\n",
              "      <td>10176296</td>\n",
              "      <td>Algebraic phasing of polyploids</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  cpc_group_id  ... patent_year\n",
              "0         G16B  ...        2019\n",
              "1         G16B  ...        2019\n",
              "2         G16B  ...        2019\n",
              "3         G16B  ...        2019\n",
              "4         G16B  ...        2019\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "id": "Z7XOUUfNZZAP",
        "outputId": "b7effd9b-ba32-4863-94e2-2c4a8fd1468d"
      },
      "source": [
        "#combine the four different dataframes into one large dataframe\n",
        "frames = [dataset1, dataset2, dataset3, dataset4]\n",
        "\n",
        "data = pd.concat(frames).reset_index()\n",
        "print(len(data['patent_number']))\n",
        "data.head()                   "
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7595\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>cpc_group_id</th>\n",
              "      <th>cpc_subgroup_id</th>\n",
              "      <th>patent_abstract</th>\n",
              "      <th>patent_number</th>\n",
              "      <th>patent_title</th>\n",
              "      <th>patent_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D10/14</td>\n",
              "      <td>An embodiment is a memory card including a rec...</td>\n",
              "      <td>10007306</td>\n",
              "      <td>276-pin buffered memory card with enhanced mem...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D10/14</td>\n",
              "      <td>To detect an abnormality in an interrupt contr...</td>\n",
              "      <td>10042791</td>\n",
              "      <td>Abnormal interrupt request processing</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D70/00</td>\n",
              "      <td>A system and method for managing power in a su...</td>\n",
              "      <td>10080195</td>\n",
              "      <td>Access and power management for centralized ne...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D10/13</td>\n",
              "      <td>A first threshold number of cache lines may be...</td>\n",
              "      <td>9965391</td>\n",
              "      <td>Access cache line from lower level cache</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D70/00</td>\n",
              "      <td>Concepts and technologies described herein rel...</td>\n",
              "      <td>10091721</td>\n",
              "      <td>Access network discovery and selection functio...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   index  ... patent_year\n",
              "0      0  ...        2018\n",
              "1      1  ...        2018\n",
              "2      2  ...        2018\n",
              "3      3  ...        2018\n",
              "4      4  ...        2018\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "id": "_jMXrrjafPy-",
        "outputId": "4569597c-4d4b-45d4-d4d2-bee06a6496dc"
      },
      "source": [
        "data_final= data.dropna(subset=[\"patent_abstract\"]) \n",
        "print(len(data_final['patent_number']))\n",
        "data_final.head()"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7595\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>cpc_group_id</th>\n",
              "      <th>cpc_subgroup_id</th>\n",
              "      <th>patent_abstract</th>\n",
              "      <th>patent_number</th>\n",
              "      <th>patent_title</th>\n",
              "      <th>patent_year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D10/14</td>\n",
              "      <td>An embodiment is a memory card including a rec...</td>\n",
              "      <td>10007306</td>\n",
              "      <td>276-pin buffered memory card with enhanced mem...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D10/14</td>\n",
              "      <td>To detect an abnormality in an interrupt contr...</td>\n",
              "      <td>10042791</td>\n",
              "      <td>Abnormal interrupt request processing</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D70/00</td>\n",
              "      <td>A system and method for managing power in a su...</td>\n",
              "      <td>10080195</td>\n",
              "      <td>Access and power management for centralized ne...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D10/13</td>\n",
              "      <td>A first threshold number of cache lines may be...</td>\n",
              "      <td>9965391</td>\n",
              "      <td>Access cache line from lower level cache</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Y02D</td>\n",
              "      <td>Y02D70/00</td>\n",
              "      <td>Concepts and technologies described herein rel...</td>\n",
              "      <td>10091721</td>\n",
              "      <td>Access network discovery and selection functio...</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   index  ... patent_year\n",
              "0      0  ...        2018\n",
              "1      1  ...        2018\n",
              "2      2  ...        2018\n",
              "3      3  ...        2018\n",
              "4      4  ...        2018\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KmtsJJtIZ2wN"
      },
      "source": [
        "corpus= []\n",
        "\n",
        "num_sentences = 0\n",
        "\n",
        "for i in range(len(data_final['patent_number'])):\n",
        "  list_item = []\n",
        "  list_item.append(data_final['patent_abstract'][i])\n",
        "  this_label= str(data_final['cpc_group_id'][i])\n",
        "  list_item.append(this_label)\n",
        "  num_sentences = num_sentences + 1\n",
        "  corpus.append(list_item)"
      ],
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cp8zl8Nxe80_",
        "outputId": "670d3352-3c5f-4f9a-b6fb-452f2332d99e"
      },
      "source": [
        "print(num_sentences)\n",
        "print(len(corpus))\n",
        "print(corpus[1])\n"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7595\n",
            "7595\n",
            "['To detect an abnormality in an interrupt control system without completely depending on dualization of a circuit, without the need to create a test pattern for a built-in self-test by spending time, and without considerably increasing an amount of power consumption. A test interrupt request is generated periodically using a timer or the like in an interrupt signal system from an interrupt controller to a central processing unit, the state of an interrupt request flag within the interrupt controller is checked in an interrupt processing routine, and in the case where it is detected that the same interrupt request flag is kept in a set state twice or more in succession, it is supposed that there is a high possibility that a failure has occurred in the interrupt signal system and it is considered that there is an abnormality.', 'Y02D']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PUFW_oZViBvX",
        "outputId": "d5ef0503-463a-4009-a9b4-b5dc9ae4489f"
      },
      "source": [
        "import random #to randomly shuffle data for when we generate training and validation dataset\n",
        "\n",
        "sentences = []\n",
        "labels = []\n",
        "random.shuffle(corpus)\n",
        "stopwords = set(nltk.corpus.stopwords.words(\"english\"))\n",
        "total_size= num_sentences\n",
        "\n",
        "for i in range (total_size):\n",
        "  labels.append(corpus[i][1])\n",
        "  sent = corpus[i][0]\n",
        "  for word in stopwords:\n",
        "    token = \" \" + word + \" \"\n",
        "    sent = sent.replace(token, \" \")\n",
        "  sentences.append(sent)\n",
        "\n",
        "print(len(labels))\n",
        "print(len(sentences))\n",
        "print(sentences[1])"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7595\n",
            "7595\n",
            "Systems methods prediction activity session mobile network use optimization user experience enhancement disclosed. In one aspect, embodiments present disclosure include method, may implemented system enhancing user experience mobile application mobile device including, using user activity characteristics mobile device server activity characteristics host server anticipate future activity session mobile device transferring impending content host server mobile device pre-cache content mobile device support predicted data activity future activity session predicted.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "whRqXGfulkJ3",
        "outputId": "95eb0d68-a118-4202-c9d3-114d7480c66f"
      },
      "source": [
        "training_portion = 0.9\n",
        "train_size = int(0.9*total_size)\n",
        "\n",
        "train_sentences = sentences[0:train_size]\n",
        "train_labels = labels[0:train_size]\n",
        "\n",
        "val_sentences = sentences[train_size:]\n",
        "val_labels = labels[train_size:]\n",
        "\n",
        "print(train_size)\n",
        "print(len(train_sentences))\n",
        "print(len(train_labels))\n",
        "print(len(val_sentences))\n",
        "print(len(val_labels))"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "6835\n",
            "6835\n",
            "6835\n",
            "760\n",
            "760\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yFEj6veQpvy0",
        "outputId": "756c02ea-7a97-4ec3-a42b-f7983fbc4700"
      },
      "source": [
        "vocab_size = 6000\n",
        "embedding_dim = 32\n",
        "max_length = 200\n",
        "trunc_type='post'\n",
        "padding_type='post'\n",
        "oov_tok = \"<OOV>\"\n",
        "\n",
        "\n",
        "tokenizer = Tokenizer(num_words= vocab_size, oov_token=oov_tok)\n",
        "tokenizer.fit_on_texts(train_sentences)\n",
        "word_index = tokenizer.word_index\n",
        "\n",
        "train_sequences = tokenizer.texts_to_sequences(train_sentences)\n",
        "train_padded = pad_sequences(train_sequences, padding=padding_type, truncating=trunc_type, maxlen=max_length)\n",
        "\n",
        "print(len(train_sequences[0]))\n",
        "print(len(train_padded[0]))\n",
        "\n",
        "print(len(train_sequences[1]))\n",
        "print(len(train_padded[1]))\n",
        "\n"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "101\n",
            "200\n",
            "69\n",
            "200\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BVfHtmF3qrtE",
        "outputId": "d0e03199-b8d8-4824-ef77-2f195186aa80"
      },
      "source": [
        "val_sequences = tokenizer.texts_to_sequences(val_sentences)\n",
        "val_padded = pad_sequences(val_sequences, padding=padding_type, maxlen=max_length)\n",
        "\n",
        "print(len(val_sequences))\n",
        "print(val_padded.shape)"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "760\n",
            "(760, 200)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_nBBoN_YrjY3",
        "outputId": "527f0f89-07fb-4ba3-a2c1-13057cb3550c"
      },
      "source": [
        "label_tokenizer = Tokenizer()\n",
        "label_tokenizer.fit_on_texts(labels)\n",
        "\n",
        "label_index = label_tokenizer.word_index\n",
        "print(label_index)\n",
        "\n",
        "training_label_seq = np.array(label_tokenizer.texts_to_sequences(train_labels))\n",
        "val_label_seq = np.array(label_tokenizer.texts_to_sequences(val_labels))\n",
        "\n",
        "print(training_label_seq[0])\n",
        "print(training_label_seq[200])\n",
        "print(training_label_seq.shape)\n",
        "\n",
        "print(val_label_seq[0])\n",
        "print(val_label_seq[500])\n",
        "print(val_label_seq.shape)"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'y02d': 1, 'g16h': 2, 'g16b': 3}\n",
            "[1]\n",
            "[3]\n",
            "(6835, 1)\n",
            "[1]\n",
            "[2]\n",
            "(760, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "coYCO1txsUTu",
        "outputId": "ce6a2f6c-4918-4a61-9981-f0cdabba7038"
      },
      "source": [
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Embedding(vocab_size +1, embedding_dim, input_length=max_length),\n",
        "    tf.keras.layers.GlobalAveragePooling1D(),\n",
        "    tf.keras.layers.Dense(24, activation='relu'),\n",
        "    tf.keras.layers.Dense(6, activation='softmax')\n",
        "])\n",
        "model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n",
        "model.summary()\n",
        "    \n",
        "\n"
      ],
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_8\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding_8 (Embedding)      (None, 200, 32)           192032    \n",
            "_________________________________________________________________\n",
            "global_average_pooling1d (Gl (None, 32)                0         \n",
            "_________________________________________________________________\n",
            "dense_16 (Dense)             (None, 24)                792       \n",
            "_________________________________________________________________\n",
            "dense_17 (Dense)             (None, 6)                 150       \n",
            "=================================================================\n",
            "Total params: 192,974\n",
            "Trainable params: 192,974\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F1Q7DVD-uYi-",
        "outputId": "f501748c-1585-49f0-faa5-503b9143572e"
      },
      "source": [
        "num_epochs= 10\n",
        "\n",
        "training_padded = np.array(train_padded)\n",
        "training_labels = training_label_seq\n",
        "validation_padded = np.array(val_padded)\n",
        "validation_labels = val_label_seq\n",
        "\n",
        "history = model.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(validation_padded, validation_labels), verbose=2)"
      ],
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "214/214 - 1s - loss: 1.2321 - accuracy: 0.4859 - val_loss: 0.9611 - val_accuracy: 0.4855\n",
            "Epoch 2/10\n",
            "214/214 - 1s - loss: 0.8022 - accuracy: 0.6606 - val_loss: 0.6427 - val_accuracy: 0.7711\n",
            "Epoch 3/10\n",
            "214/214 - 1s - loss: 0.5111 - accuracy: 0.8097 - val_loss: 0.4717 - val_accuracy: 0.8092\n",
            "Epoch 4/10\n",
            "214/214 - 1s - loss: 0.3770 - accuracy: 0.8574 - val_loss: 0.3906 - val_accuracy: 0.8500\n",
            "Epoch 5/10\n",
            "214/214 - 1s - loss: 0.2953 - accuracy: 0.8920 - val_loss: 0.3450 - val_accuracy: 0.8645\n",
            "Epoch 6/10\n",
            "214/214 - 1s - loss: 0.2423 - accuracy: 0.9151 - val_loss: 0.3174 - val_accuracy: 0.8842\n",
            "Epoch 7/10\n",
            "214/214 - 1s - loss: 0.2079 - accuracy: 0.9314 - val_loss: 0.3061 - val_accuracy: 0.8921\n",
            "Epoch 8/10\n",
            "214/214 - 1s - loss: 0.1829 - accuracy: 0.9383 - val_loss: 0.3014 - val_accuracy: 0.8947\n",
            "Epoch 9/10\n",
            "214/214 - 1s - loss: 0.1614 - accuracy: 0.9462 - val_loss: 0.3020 - val_accuracy: 0.8934\n",
            "Epoch 10/10\n",
            "214/214 - 1s - loss: 0.1450 - accuracy: 0.9535 - val_loss: 0.3023 - val_accuracy: 0.8961\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 541
        },
        "id": "doHBYA5byfwu",
        "outputId": "ede4d3ea-9363-4f2f-9882-c26e0d532c70"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "def plot_graphs(history, string):\n",
        "  plt.plot(history.history[string])\n",
        "  plt.plot(history.history['val_'+string])\n",
        "  plt.xlabel(\"Epochs\")\n",
        "  plt.ylabel(string)\n",
        "  plt.legend([string, 'val_'+string])\n",
        "  plt.show()\n",
        "  \n",
        "plot_graphs(history, \"accuracy\")\n",
        "plot_graphs(history, \"loss\")"
      ],
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A9JKSNBmyvF7"
      },
      "source": [
        "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n",
        "\n",
        "def decode_sentence(text):\n",
        "    return ' '.join([reverse_word_index.get(i, '?') for i in text])"
      ],
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XEv5w5pTy9vb",
        "outputId": "9e0fbecd-e875-4535-f44a-c8859b5261ac"
      },
      "source": [
        "e = model.layers[0]\n",
        "weights = e.get_weights()[0]\n",
        "print(weights.shape) # shape: (vocab_size, embedding_dim)"
      ],
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(6001, 32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9mt9gy78zCnz"
      },
      "source": [
        "import io\n",
        "\n",
        "out_v = io.open('vecs.tsv', 'w', encoding='utf-8')\n",
        "out_m = io.open('meta.tsv', 'w', encoding='utf-8')\n",
        "for word_num in range(1, vocab_size):\n",
        "  word = reverse_word_index[word_num]\n",
        "  embeddings = weights[word_num]\n",
        "  out_m.write(word + \"\\n\")\n",
        "  out_v.write('\\t'.join([str(x) for x in embeddings]) + \"\\n\")\n",
        "out_v.close()\n",
        "out_m.close()"
      ],
      "execution_count": 104,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "bfxy8zB9zDjD",
        "outputId": "069583fb-bd4f-46bf-a930-6db44777c511"
      },
      "source": [
        "try:\n",
        "  from google.colab import files\n",
        "except ImportError:\n",
        "  pass\n",
        "else:\n",
        "  files.download('vecs.tsv')\n",
        "  files.download('meta.tsv')"
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_f9b4e956-a545-4fe7-a03d-680998ff3f2c\", \"vecs.tsv\", 2226552)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "download(\"download_8d9ff030-bdb0-4369-a8fa-f26fc05a0820\", \"meta.tsv\", 50730)"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}